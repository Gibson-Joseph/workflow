// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Workflow {
  id          String  @id @default(cuid())
  userId      String
  name        String
  description String?
  definition  String
  status      String // DRAFT | PUBLISHED

  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  execution WorkflowExecution[]

  // User can not have two workflow with same name
  @@unique([name, userId])
}

model WorkflowExecution {
  id         String   @id @default(cuid())
  userId     String
  status     String
  createAt   DateTime @default(now())
  definition String   @default("{}")

  workflowId String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  phases ExecutionPhase[]
}

model ExecutionPhase {
  id       String  @id @default(cuid())
  userId   String
  number   Int
  name     String
  contants String?

  nodeId     String
  sourceNode String?
  nodeType   String

  workflowExecutionId String
  execution           WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)
}

model Customer {
  id            String  @id @default(cuid())
  name          String
  phoneNo       String
  activePhaseId String?

  ExecutionOutput ExecutionOutput[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([phoneNo])
}

model ExecutionOutput {
  id              String @id @default(cuid())
  ExecutionOutput String // JSON string or any other data type based on your use case
  nodeId          String

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
